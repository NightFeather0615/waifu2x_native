// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import "../frb_generated.dart";
import "package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart";
import "package:freezed_annotation/freezed_annotation.dart" hide protected;
part "api.freezed.dart";

Future<void> inferImage(
        {required String inputFilename,
        required String inputPath,
        required String outputPath,
        required BigInt texturePtr,
        required String arch,
        required String domain,
        required int scale,
        required int denoise,
        required int ttaLevel,
        required bool colorStability,
        required int padding,
        required int tileSize,
        required int offset,
        required FutureOr<void> Function(TaskState) onState}) =>
    RustLib.instance.api.crateApiApiInferImage(
        inputFilename: inputFilename,
        inputPath: inputPath,
        outputPath: outputPath,
        texturePtr: texturePtr,
        arch: arch,
        domain: domain,
        scale: scale,
        denoise: denoise,
        ttaLevel: ttaLevel,
        colorStability: colorStability,
        padding: padding,
        tileSize: tileSize,
        offset: offset,
        onState: onState);

@freezed
sealed class TaskState with _$TaskState {
  const TaskState._();

  const factory TaskState.waiting() = TaskState_Waiting;
  const factory TaskState.loadImage() = TaskState_LoadImage;
  const factory TaskState.pad() = TaskState_Pad;
  const factory TaskState.loadModel() = TaskState_LoadModel;
  const factory TaskState.inference({
    required int progress,
    required int total,
  }) = TaskState_Inference;
  const factory TaskState.saveImage() = TaskState_SaveImage;
  const factory TaskState.done() = TaskState_Done;
}
